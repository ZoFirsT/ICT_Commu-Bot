const { Events, Interaction, EmbedBuilder } = require("discord.js");
const {
  VERIFY_ROLE_ID,
  LOG_CHANNEL_ID,
  DISPLAY_CHANNEL_ID,
  DISPLAY_FULL_CHANNEL_ID,
} = process.env;

/**
 * @param {Interaction} interaction
 * @returns void
 */
const verifyInputModal = async (interaction) => {
  try {
    const interactionUser = interaction.guild.members.cache.get(
      interaction.user.id
    );

    if (interactionUser.roles.cache.has(VERIFY_ROLE_ID)) {
      return interaction.reply({
        content: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
        ephemeral: true,
      });
    }

    const role = interaction.guild.roles.cache.find(
      (r) => r.id === VERIFY_ROLE_ID
    );
    await interactionUser.roles.add(role); // Use interactionUser to add the role

    const [fullName, nickName, major, studentId, year] =
      interaction.fields.fields.map((field) => field.value);

    const hiddenStudentId = hideStudentId(studentId);

    const embed = new EmbedBuilder()
      .setColor("#0099ff")
      .setTitle(`üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${nickName} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå! üéâ`)
      .setDescription(`**${interactionUser.user}** ‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß`)
      .setThumbnail(interactionUser.user.displayAvatarURL())
      .addFields(
        { name: "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", value: nickName, inline: true },
        { name: "‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ", value: year, inline: true },
        { name: "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤", value: hiddenStudentId, inline: true },
        { name: "‡∏™‡∏≤‡∏Ç‡∏≤", value: major, inline: true }
      )
      .setTimestamp()
      .setFooter({ text: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å!" });

    const Fullembed = new EmbedBuilder()
      .setColor("#0099ff")
      .setTitle(`üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${nickName} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå! üéâ`)
      .setDescription(`**${interactionUser.user}** ‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß`)
      .setThumbnail(interactionUser.user.displayAvatarURL())
      .addFields(
        { name: "‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á", value: fullName, inline: true },
        { name: "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", value: nickName, inline: true },
        { name: "‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ", value: year, inline: true },
        { name: "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤", value: studentId, inline: true },
        { name: "‡∏™‡∏≤‡∏Ç‡∏≤", value: major, inline: true }
      )
      .setTimestamp()
      .setFooter({ text: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å!" });

    await interaction.guild.channels.cache
      .get(DISPLAY_CHANNEL_ID)
      .send({ embeds: [embed] });

    await interaction.guild.channels.cache
      .get(DISPLAY_FULL_CHANNEL_ID)
      .send({ embeds: [Fullembed] });


    await interaction.guild.channels.cache
      .get(LOG_CHANNEL_ID)
      .send({ content: `**${interactionUser.user}** ‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏•‡πâ‡∏ß` });

    await interaction.reply({
      content: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      ephemeral: true,
    });
  } catch (error) {
    console.error("Error in verifyInputModal:", error);

    let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö";
    let ephemeral = true;

    if (error.code === 10062) {
      errorMessage = "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß";
    } else if (error.code === 50001) { // Missing Access error
      errorMessage = "‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó";
      ephemeral = false; // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏´‡πá‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏£‡∏≤‡∏ö
    } else if (error.code === 50013) { // Missing Permissions error
      errorMessage = "‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó";
      ephemeral = false; // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏´‡πá‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏£‡∏≤‡∏ö
    }

    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    if (interaction.replied || interaction.deferred) {
      try {
        await interaction.followUp({ content: errorMessage, ephemeral });
      } catch (followUpError) {
        console.error("Failed to follow up:", followUpError);
      }
    } else {
      try {
        await interaction.reply({ content: errorMessage, ephemeral });
      } catch (replyError) {
        console.error("Failed to reply:", replyError);
      }
    }
  }
  
};

const hideStudentId = (studentId) => {
  return studentId.slice(0, 4) + "xxx";
};

module.exports = {
  name: Events.InteractionCreate,
  async execute(interaction) {
    try {
      if (interaction.isChatInputCommand()) {
        const command = interaction.client.commands.get(interaction.commandName);

        if (!command) {
          console.error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ${interaction.commandName} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö!`);
          return;
        }

        await command.execute(interaction);
      } else if (interaction.isModalSubmit()) {
        if (interaction.customId === "verify_modal") {
          await verifyInputModal(interaction);
        }
      }
    } catch (error) {
      console.error("Error handling interaction:", error);

      let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì";
      if (error.code === 10062) { // Interaction has already been acknowledged.
        errorMessage = "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß";
      }

      // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
      if (interaction.replied || interaction.deferred) {
        await interaction.followUp({
          content: errorMessage,
          ephemeral: true,
        });
      } else {
        await interaction.reply({
          content: errorMessage,
          ephemeral: true,
        });
      }
    }
  },
};
